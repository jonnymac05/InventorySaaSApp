import { pgTable, text, serial, integer, boolean, timestamp, json, varchar, uniqueIndex } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// Users table
export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  email: text("email").notNull().unique(),
  password: text("password").notNull(),
  name: text("name").notNull(),
  role: text("role", { enum: ["admin", "employee"] }).notNull().default("employee"),
  companyId: integer("company_id").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Companies table
export const companies = pgTable("companies", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  assetIdPattern: text("asset_id_pattern").notNull().default("A-####"),
  currentAssetId: integer("current_asset_id").notNull().default(1),
  subscriptionTier: text("subscription_tier", { enum: ["free", "basic", "premium", "enterprise"] }).notNull().default("free"),
  subscriptionStatus: text("subscription_status", { enum: ["active", "trialing", "past_due", "cancelled"] }).notNull().default("active"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Departments table
export const departments = pgTable("departments", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  companyId: integer("company_id").notNull(),
  assetCount: integer("asset_count").notNull().default(0),
  capacityUsed: integer("capacity_used").notNull().default(0),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// User-Department relationships
export const userDepartments = pgTable("user_departments", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull(),
  departmentId: integer("department_id").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Custom fields table
export const customFields = pgTable("custom_fields", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  label: text("label").notNull(),
  type: text("type", { enum: ["text", "number", "date", "boolean", "select"] }).notNull(),
  options: json("options"),
  required: boolean("required").notNull().default(false),
  companyId: integer("company_id").notNull(),
  departmentId: integer("department_id"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Inventory items table
export const inventoryItems = pgTable("inventory_items", {
  id: serial("id").primaryKey(),
  assetId: varchar("asset_id", { length: 50 }).notNull(),
  name: text("name").notNull(),
  description: text("description"),
  quantity: integer("quantity").notNull().default(1),
  unitPrice: integer("unit_price"),
  location: text("location"),
  status: text("status", { enum: ["active", "low", "ordered", "discontinued"] }).notNull().default("active"),
  purchaseDate: timestamp("purchase_date"),
  departmentId: integer("department_id").notNull(),
  companyId: integer("company_id").notNull(),
  customFields: json("custom_fields"),
  createdBy: integer("created_by").notNull(),
  updatedBy: integer("updated_by").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

// Activity log table
export const activityLogs = pgTable("activity_logs", {
  id: serial("id").primaryKey(),
  action: text("action", { enum: ["added", "updated", "removed", "transferred"] }).notNull(),
  itemId: integer("item_id").notNull(),
  assetId: text("asset_id").notNull(),
  itemName: text("item_name").notNull(),
  departmentName: text("department_name").notNull(),
  userId: integer("user_id").notNull(),
  userName: text("user_name").notNull(),
  companyId: integer("company_id").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Create insert schemas
export const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true });
export const insertCompanySchema = createInsertSchema(companies).omit({ id: true, createdAt: true, currentAssetId: true });
export const insertDepartmentSchema = createInsertSchema(departments).omit({ id: true, createdAt: true, assetCount: true, capacityUsed: true });
export const insertUserDepartmentSchema = createInsertSchema(userDepartments).omit({ id: true, createdAt: true });
export const insertCustomFieldSchema = createInsertSchema(customFields).omit({ id: true, createdAt: true });
export const insertInventoryItemSchema = createInsertSchema(inventoryItems).omit({ 
  id: true, 
  createdAt: true, 
  updatedAt: true,
  assetId: true // This is generated by the server
});
export const insertActivityLogSchema = createInsertSchema(activityLogs).omit({ id: true, createdAt: true });

// Create registration schema
export const registerSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
  name: z.string().min(2),
  companyName: z.string().min(2)
});

// Define types
export type InsertUser = z.infer<typeof insertUserSchema>;
export type InsertCompany = z.infer<typeof insertCompanySchema>;
export type InsertDepartment = z.infer<typeof insertDepartmentSchema>;
export type InsertUserDepartment = z.infer<typeof insertUserDepartmentSchema>;
export type InsertCustomField = z.infer<typeof insertCustomFieldSchema>;
export type InsertInventoryItem = z.infer<typeof insertInventoryItemSchema>;
export type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;
export type RegisterData = z.infer<typeof registerSchema>;

export type User = typeof users.$inferSelect;
export type Company = typeof companies.$inferSelect;
export type Department = typeof departments.$inferSelect;
export type UserDepartment = typeof userDepartments.$inferSelect;
export type CustomField = typeof customFields.$inferSelect;
export type InventoryItem = typeof inventoryItems.$inferSelect;
export type ActivityLog = typeof activityLogs.$inferSelect;

// Auth type for login
export type LoginData = {
  email: string;
  password: string;
};
